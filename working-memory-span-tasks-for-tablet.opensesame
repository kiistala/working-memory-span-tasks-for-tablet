# Generated by OpenSesame 0.27.4 (Frisky Freud)
# Wed Feb 25 16:40:59 2015 (posix)
# <http://www.cogsci.nl/opensesame>

set foreground "white"
set subject_parity "even"
set font_size "48"
set description "Default description"
set font_family "serif"
set title "Tikapuu - Counting Span"
set font_bold "no"
set coordinates "relative"
set height "800"
set mouse_backend "droid"
set width "1280"
set compensation "0"
set sampler_backend "legacy"
set font_italic "no"
set background "black"
set subject_nr "0"
set keyboard_backend "droid"
set start "WMcapacity"
set transparent_variables "no"
set synth_backend "droid"
set canvas_backend "droid"

define inline_script 2_circles
	set _run "self.my_canvas.show()"
	___prepare__
	from openexp.canvas import canvas
	from math import sqrt
	
	circleradius = exp.get('tikapuu_circleradius')
	circlecolor = exp.get('tikapuu_circlecolor')
	
	balls = list()
	balls.append((310, 100, circlecolor))
	balls.append((500, 300, circlecolor))
	
	self.my_canvas = canvas(exp)
	
	for bx,by,bcolor in balls:
	  self.my_canvas.circle(bx, by, circleradius, fill=True, color=bcolor)
	__end__
	set description "Executes Python code"

define logger logger_after_response
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "yes"
	log "subject_nr"
	log "time_logger_after_response"
	log "entered_text"
	log "wrong_answers"
	log "level"
	log "correct_letters"
	log "rwrong_answers"
	log "correct_responseStr"
	log "sentence_number"
	log "letter"
	log "response_TrueFalse_choice"
	log "response_time_TrueFalse_choice"
	log "rlevel"
	log "rrepetition"
	log "sentenceText"
	log "sentenceTrue"
	log "letters_entered"
	log "responseString"
	log "time_sentence_and_TF_buttons"
	log "given_name"
	log "response_number_choice"
	log "response_time_number_choice"
	log "time_ready_to_begin"
	log "response_time_ready_to_begin"
	log "time_its_over_thank_you"
	log "time_dummy_delay"
	log "time_response"
	log "response_response"
	log "response_time_response"

define inline_script check_pin_input
	___run__
	#
	exp.set("pin", exp.get("entered_text"))
	# exp.set("entered_text", "")
	
	#if ( str(exp.get("pin")) == str(exp.get("pinWanted")) ):
	if ( exp.get("pin") == exp.get("pinWanted") ):
	  exp.set("pin_is_correct", 1)
	    
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence train_rspan2
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Bussit_kulkevat "always"
	run TrueFalse_choice "always"
	run L "always"
	run logger_after_response "always"

define sequence train_rspan1
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Norsuilla_on_ "always"
	run TrueFalse_choice "always"
	run S "always"
	run logger_after_response "always"

define text_display rspan_its_over
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	TehtU+00E4vU+00E4 2 loppui.
	
	Kosketa nU+00E4yttU+00F6U+00E4.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display cspan_its_over
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	TehtU+00E4vU+00E4 1 loppui.
	
	Kosketa nU+00E4yttU+00F6U+00E4.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define inline_script init_cst2
	___run__
	exp.set("input_type", "cspan")
	exp.set('answer', "")
	exp.set('answerWanted', "72")
	exp.set('answer_is_correct', 0)
	
	#exp.set("ok_chosen", 0)
	#exp.set("entered_text", "")
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script init_cst1
	___run__
	exp.set("input_type", "cspan")
	exp.set('answer', "")
	exp.set('answerWanted', "35")
	exp.set('answer_is_correct', 0)
	
	#exp.set("ok_chosen", 0)
	#exp.set("entered_text", "")
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence image_set_and_response
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run init_image_set "always"
	run image_loop "always"
	run ask_for_circle_numbers "always"
	run check_cspan_answer "always"
	run logger_after_response "always"

define feedback show_wrong_pin
	set duration "1000"
	set reset_variables "yes"
	set description "Provides feedback to the participant"
	draw textline 0 0 "VU+00E4U+00E4rU+00E4 PIN: [entered_text]" center=1 color=white font_family="serif" font_size=48 font_italic=no font_bold=no show_if="always" html="yes"

define sequence cspan_training_again
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run wrong_answer "[answer_is_correct] == 0"

define inline_script 3_circles
	set _run "self.my_canvas.show()"
	___prepare__
	from openexp.canvas import canvas
	from math import sqrt
	
	circleradius = exp.get('tikapuu_circleradius')
	circlecolor = exp.get('tikapuu_circlecolor')
	
	balls = list()
	balls.append((150, 110, circlecolor))
	balls.append((310, 100, circlecolor))
	balls.append((500, 300, circlecolor))
	
	self.my_canvas = canvas(exp)
	
	for bx,by,bcolor in balls:
	  self.my_canvas.circle(bx, by, circleradius, fill=True, color=bcolor)
	__end__
	set description "Executes Python code"

define inline_script wrong_answers_to_0
	___run__
	exp.set("wrong_answers", 0)
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop cspan_levels
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set offset "no"
	set item "cspan_level"
	set break_if "[wrong_answers] >= 3"
	set column_order "level;circle_ns"
	set cycles "7"
	set order "sequential"
	setcycle 0 level "2"
	setcycle 0 circle_ns "s6482735857"
	setcycle 1 level "3"
	setcycle 1 circle_ns "s574627685752258"
	setcycle 2 level "4"
	setcycle 2 circle_ns "s73625246852446833875"
	setcycle 3 level "5"
	setcycle 3 circle_ns "s4825374583374628632573528"
	setcycle 4 level "6"
	setcycle 4 circle_ns "s586247384726753624536482473586"
	setcycle 5 level "7"
	setcycle 5 circle_ns "s48572636283574752836457426385368247"
	setcycle 6 level "8"
	setcycle 6 circle_ns "s4763528336528742247586434675328376384652"
	run cspan_level

define sketchpad L
	set duration "2000"
	set description "Displays stimuli"
	draw textline 0 0 "L" center=1 color=yellow font_family="serif" font_size=128 font_italic=no font_bold=no show_if="always" html="yes"

define text_display i72
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	Seuraavaksi sinulta kysytU+00E4U+00E4n U+00E4sken nU+00E4kemiesi ympyrU+00F6iden lukumU+00E4U+00E4rU+00E4t: 7 ja 2.
	
	Kirjoita ne tU+00E4ssU+00E4 muodossa: 72 ja paina OK.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin pU+00E4U+00E4set kokeilemaan vastaamista.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence rspan_level
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run set_rwrong_answers_to_0 "always"
	run rspan_repeat_3_times "always"

define sequence train_cspan
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run cspan_training_welcome "always"
	run init_cst1 "always"
	run train_cspan1 "always"
	run cspan_training1_ok "always"
	run init_cst2 "always"
	run train_cspan2 "always"
	run cspan_training2_ok "always"

define loop train_cspan1
	set repeat "999"
	set description "Repeatedly runs another item"
	set skip "0"
	set offset "no"
	set item "cspan_training1"
	set break_if "[answer_is_correct]==1"
	set column_order "entered_text;ok_chosen"
	set cycles "1"
	set order "sequential"
	setcycle 0 entered_text ""
	setcycle 0 ok_chosen ""
	run cspan_training1

define loop train_cspan2
	set repeat "999"
	set description "Repeatedly runs another item"
	set skip "0"
	set column_order "entered_text;ok_chosen"
	set item "cspan_training2"
	set break_if "[answer_is_correct] == 1"
	set offset "no"
	set cycles "1"
	set order "sequential"
	setcycle 0 entered_text ""
	setcycle 0 ok_chosen ""
	run cspan_training2

define inline_script set_set
	set _run ""
	___prepare__
	# e.g. [2, 3]
	
	try:
	  sentence_numbers_array = sentence_numbers[ exp.get("rlevel") ][ exp.get("rrepetition") - 1 ]
	  sentence_set = [ sentences[i] for i in sentence_numbers_array ]
	  set_letters = [ pick_letters[i] for i in sentence_numbers_array ]
	except IndexError:
	  sentence_numbers_array = None
	  sentence_set = None
	
	correct_answer = ""
	for i in set_letters:
	  correct_answer = str(correct_answer) + i
	
	exp.set("correct_letters",  correct_answer)
	
	#exp.set("ranswer_is_valid",  0)
	__end__
	set description "Executes Python code"

define loop keep_asking_for_pin
	set repeat "999"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "ask_for_pin"
	set break_if "[pin_is_correct]==1"
	set column_order "entered_text;ok_chosen"
	set cycles "1"
	set order "sequential"
	setcycle 0 entered_text ""
	setcycle 0 ok_chosen ""
	run ask_for_pin

define text_display pin_ok_lets_start
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	TU+00E4ssU+00E4 kokeessa on kaksi tehtU+00E4vU+00E4U+00E4.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin aloitetaan ensimmU+00E4inen.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define inline_script draw_image
	___run__
	from openexp.mouse import mouse
	from math import sqrt
	
	# exp.set('correct_response', exp.get('correct_response') + exp.get('circle_count') )
	# exp.set('correct_response', "45")
	
	# print self.get('correct_response')
	# print type( self.get('correct_response') ) # int
	
	exp.set('correct_responseStr', str(self.get('correct_responseStr')) + str(self.get('circle_count')))
	t1 = self.my_canvas.show()
	
	
	#exp.set('correct', correct)
	#exp.set('response_time', response_time)
	
	#exp.set('total_responses', self.get('total_responses')+1)
	#exp.set('total_correct', self.get('total_correct')+correct)
	#exp.set('total_response_time', self.get('total_response_time')+response_time)
	
	#avg_rt = self.get('total_response_time')/self.get('total_responses')
	#acc = 100.*self.get('total_correct')/self.get('total_responses')
	
	#exp.set('average_response_time', avg_rt)
	#exp.set('avg_rt', avg_rt)
	#exp.set('accuracy', acc)
	#exp.set('acc', acc)
	__end__
	___prepare__
	from openexp.canvas import canvas
	from random import shuffle, choice, randrange
	from math import sqrt
	
	def dist(p,q):
	  return sqrt((p[0] - q[0]) ** 2 + (p[1] - q[1]) ** 2)
	
	self.my_canvas = canvas(exp)
	
	width = self.get('width')
	height = self.get('height')
	circleradius = exp.get('tikapuu_circleradius')
	padding = circleradius
	
	xc = width/2
	yc = height/2
	
	# max distance from center
	mdfc_x = xc - circleradius - padding
	mdfc_y = yc - circleradius - padding
	
	# JyvU+00E4skylU+00E4 University, 
	# circlecolor = 'purple'
	# circlecolor = 'yellow'
	circlecolor = exp.get('tikapuu_circlecolor')
	
	# N = randrange(exp.get('min_circles'), exp.get('max_circles') + 1)
	N = int(ns[exp.get('image_number')])
	
	exp.set('circle_count', N)
	
	balls = list()
	
	# for i in range(N):
	while len(balls) < N:
	  randomdistance_x = randrange(-1*mdfc_x, mdfc_x)
	  randomdistance_y = randrange(-1*mdfc_y, mdfc_y)
	  newx = xc + randomdistance_x
	  newy = yc + randomdistance_y
	  ok = True
	
	  if (len(balls) > 0):
	  # if (true):
	    # check if balls overlap
	    for oldx,oldy,oldcolor in balls:
	      p = [oldx, oldy]
	      q = [newx, newy]
	
	      if dist(p, q) < 2 * circleradius + padding:
	        # overlap!
	        # balls.append((newx,newy,'red'))
	        ok = False
	        break
	
	    if (ok):
	      balls.append((newx, newy, circlecolor))
	
	  else:
	    # first ball
	    balls.append((newx, newy, circlecolor))
	
	for bx,by,bcolor in balls:
	  self.my_canvas.circle(bx, by, circleradius, fill=True, color=bcolor)
	__end__
	set description "Executes Python code"

define inline_script init_level
	___run__
	# tason alussa vU+00E4U+00E4riU+00E4 vastauksia on nolla
	# tason lopussa niitU+00E4 saa olla 2 tai vU+00E4hemmU+00E4n
	# jos 3, koe loppuu
	
	exp.set('wrong_answers', 0)
	
	exp.set('set1', "")
	exp.set('set2', "")
	exp.set('set3', "")
	
	cns = exp.get("circle_ns")
	current_level = exp.get("level")
	
	sets = cns[1:]
	array_of_5sets = [sets[i:i+current_level] for i in range(len(sets)) if not i % current_level]
	
	shuffle(array_of_5sets)
	chosen_sets = array_of_5sets[:3]
	
	for setNum in range(1,4):
	  tempStr = "s" + "".join("{0}".format(n) for n in chosen_sets[setNum-1])
	  exp.set("set" + str(setNum), tempStr)
	__end__
	set _prepare "from random import randrange, shuffle"
	set description "Executes Python code"

define inline_script custom_form
	___run__
	# Import the widgets library
	
	# form = widgets.form(self.experiment)
	
	if ( (exp.get("input_type") == "pin") | (exp.get("input_type") == "pin_end")):
	  # Create a PIN form
	  form = widgets.form(self.experiment, cols=[1,1,1,1,1,1,1,1,1], rows=[2,1,1,2,1], margins=(100,50,100,50), spacing=10, theme='plain')
	
	  labelQuestion = widgets.label(form, text="SyU+00F6tU+00E4 PIN-koodi", center=True)
	  if (exp.get("input_type") == "pin_end"):
	    labelQuestion = widgets.label(form, text="PIN-koodi", center=True)
	    
	  labelHelp = widgets.label(form, text="<span size='24'>C = Poista merkkiU+005CnOK = Valmis</span>", center=False)
	
	  labelEnteredText = widgets.label(form, text=exp.get("entered_text"), center=False)
	
	  button2 = widgets.button(form, text='2')
	  button3 = widgets.button(form, text='3')
	  button4 = widgets.button(form, text='4')
	  button5 = widgets.button(form, text='5')
	  button6 = widgets.button(form, text='6')
	  button7 = widgets.button(form, text='7')
	  button8 = widgets.button(form, text='8')
	  buttonOK = widgets.button(form, text='OK')
	  buttonBS = widgets.button(form, text='C')
	
	  # Add the widgets to the form. The position in the form is indicated as a
	  # (column, row) tuple.
	  row = 0
	  form.set_widget(labelQuestion, (0, row), colspan=9)
	
	  row += 1
	  form.set_widget(labelEnteredText, (1, row), colspan=5)
	  form.set_widget(buttonBS, (6, row))
	  form.set_widget(buttonOK, (7, row))
	
	  row += 1
	  row += 1
	  # 0 empty
	  form.set_widget(button2, (1, row))
	  form.set_widget(button3, (2, row))
	  form.set_widget(button4, (3, row))
	  form.set_widget(button5, (4, row))
	  form.set_widget(button6, (5, row))
	  form.set_widget(button7, (6, row))
	  form.set_widget(button8, (7, row))
	  # 8 empty
	  
	  row += 1
	  form.set_widget(labelHelp, (6, row), colspan=2)
	  
	  # Execute the form! In this case, the form will return the text of the button that
	  # was clicked. This is one way to get a return value out of the form. Another way
	  # is to use the 'var' keyword, supported some of the widgets.
	  button_clicked = form._exec()
	
	
	elif (exp.get("input_type") == "cspan"):
	  # Create a Counting Span form
	  form = widgets.form(self.experiment, cols=[1,1,1,1,1,1,1,1,1], rows=[2,1,1,2,1], margins=(100,50,100,50), spacing=10, theme='plain')
	
	  labelQuestion = widgets.label(form, text='Valitse ympyrU+00F6iden lukumU+00E4U+00E4rU+00E4t', center=True)
	  labelHelp = widgets.label(form, text="<span size='24'>C = Poista merkkiU+005CnOK = Valmis</span>", center=False)
	
	  labelEnteredText = widgets.label(form, text=exp.get("entered_text"), center=False)
	
	  button2 = widgets.button(form, text='2')
	  button3 = widgets.button(form, text='3')
	  button4 = widgets.button(form, text='4')
	  button5 = widgets.button(form, text='5')
	  button6 = widgets.button(form, text='6')
	  button7 = widgets.button(form, text='7')
	  button8 = widgets.button(form, text='8')
	  buttonOK = widgets.button(form, text='OK')
	  buttonBS = widgets.button(form, text='C')
	
	  # Add the widgets to the form. The position in the form is indicated as a
	  # (column, row) tuple.
	  row = 0
	  form.set_widget(labelQuestion, (0, row), colspan=9)
	
	  row += 1
	  form.set_widget(labelEnteredText, (1, row), colspan=5)
	  form.set_widget(buttonBS, (6, row))
	  form.set_widget(buttonOK, (7, row))
	
	  row += 1
	  row += 1
	  # 0 empty
	  form.set_widget(button2, (1, row))
	  form.set_widget(button3, (2, row))
	  form.set_widget(button4, (3, row))
	  form.set_widget(button5, (4, row))
	  form.set_widget(button6, (5, row))
	  form.set_widget(button7, (6, row))
	  form.set_widget(button8, (7, row))
	  # 8 empty
	  
	  row += 1
	  form.set_widget(labelHelp, (6, row), colspan=2)
	  
	  # Execute the form! In this case, the form will return the text of the button that
	  # was clicked. This is one way to get a return value out of the form. Another way
	  # is to use the 'var' keyword, supported some of the widgets.
	  button_clicked = form._exec()
	
	elif (exp.get("input_type") == "rspan"):
	  # Create a Reading Span form
	  form = widgets.form(self.experiment, cols=[1,1,1,1,1,1,1,1,1], rows=[2,1,1,2,1], margins=(100,50,100,50), spacing=10, theme='plain')
	
	  labelQuestion = widgets.label(form, text='Valitse nU+00E4kemU+00E4si keltaiset kirjaimet', center=True)
	  labelHelp = widgets.label(form, text="<span size='24'>C = Poista merkkiU+005CnOK = Valmis</span>", center=False)
	
	  labelEnteredText = widgets.label(form, text=exp.get("entered_text"), center=False)
	
	  button1 = widgets.button(form, text='H')
	  button2 = widgets.button(form, text='J')
	  button3 = widgets.button(form, text='K')
	  button4 = widgets.button(form, text='L')
	  button5 = widgets.button(form, text='M')
	  button6 = widgets.button(form, text='P')
	  button7 = widgets.button(form, text='R')
	  button8 = widgets.button(form, text='S')
	  button9 = widgets.button(form, text='V')
	  buttonOK = widgets.button(form, text='OK')
	  buttonBS = widgets.button(form, text='C')
	
	  # Add the widgets to the form. The position in the form is indicated as a
	  # (column, row) tuple.
	  row = 0
	  form.set_widget(labelQuestion, (0, row), colspan=9)
	
	  row += 1
	  form.set_widget(labelEnteredText, (1, row), colspan=5)
	  form.set_widget(buttonBS, (6, row))
	  form.set_widget(buttonOK, (7, row))
	
	  row += 1
	  row += 1
	  # 0 empty
	  form.set_widget(button1, (0, row))
	  form.set_widget(button2, (1, row))
	  form.set_widget(button3, (2, row))
	  form.set_widget(button4, (3, row))
	  form.set_widget(button5, (4, row))
	  form.set_widget(button6, (5, row))
	  form.set_widget(button7, (6, row))
	  form.set_widget(button8, (7, row))
	  form.set_widget(button9, (8, row))
	  # 8 empty
	  
	  row += 1
	  form.set_widget(labelHelp, (6, row), colspan=2)
	  
	  # Execute the form! In this case, the form will return the text of the button that
	  # was clicked. This is one way to get a return value out of the form. Another way
	  # is to use the 'var' keyword, supported some of the widgets.
	  button_clicked = form._exec()
	
	elif (exp.get("input_type") == "strategy_cspan"):
	  # Create a Counting Span Strategy form
	  form = widgets.form(self.experiment, cols=[1,1,1,1,1,1,1,1,1], rows=[1,1,1,1,1,1,1,1,1,1], margins=(50,50,50,50), spacing=5, theme='plain')
	
	  labelQuestion = widgets.label(form, text="<span size='36'>MitU+00E4 keinoja kU+00E4ytit ympyrU+00F6iden lukumU+00E4U+00E4rien muistamiseksi?U+005CnValitse yksi seuraavista ja paina OK.</span>", center=True)
	  labelEnteredText = widgets.label(form, text=exp.get("entered_text"), center=False)
	
	  button1 = widgets.button(form, text='1')
	  button2 = widgets.button(form, text='2')
	  button3 = widgets.button(form, text='3')
	  button4 = widgets.button(form, text='4')
	  button5 = widgets.button(form, text='5')
	  button6 = widgets.button(form, text='6')
	
	  option1 = widgets.label(form, text="<span size='24'>En kU+00E4yttU+00E4nyt mitU+00E4U+00E4n muistikeinoja</span>", center=False)
	  option2 = widgets.label(form, text="<span size='24'>Kertasin / toistelin lukumU+00E4U+00E4riU+00E4 mielessU+00E4ni</span>", center=False)
	  option3 = widgets.label(form, text="<span size='24'>Muodostin luvuista ryhmiU+00E4 / ryhmittelin lukuja mielessU+00E4ni</span>", center=False)
	  option4 = widgets.label(form, text="<span size='24'>Keksin luvuista sanoja / lauseita / tarinoita</span>", center=False)
	  option5 = widgets.label(form, text="<span size='24'>Muodostin luvuista kuvia / keksin lukuihin liittyviU+00E4 kuvia mielessU+00E4ni</span>", center=False)
	  option6 = widgets.label(form, text="<span size='24'>Jokin muu muistikeino</span>", center=False)
	  
	  buttonOK = widgets.button(form, text='OK')
	  buttonBS = widgets.button(form, text='C')
	
	  row = 0
	  form.set_widget(labelQuestion, (0, row), colspan=9)
	  
	  row += 1
	
	  row += 1
	  form.set_widget(labelEnteredText, (1, row), colspan=5)
	  form.set_widget(buttonBS, (6, row))
	  form.set_widget(buttonOK, (7, row))
	
	  row += 1
	  
	  row += 1
	  form.set_widget(button1, (0, row), colspan=2)
	  form.set_widget(option1, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button2, (0, row), colspan=2)
	  form.set_widget(option2, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button3, (0, row), colspan=2)
	  form.set_widget(option3, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button4, (0, row), colspan=2)
	  form.set_widget(option4, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button5, (0, row), colspan=2)
	  form.set_widget(option5, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button6, (0, row), colspan=2)
	  form.set_widget(option6, (2, row), colspan=7)
	
	  button_clicked = form._exec()
	
	elif (exp.get("input_type") == "strategy_rspan"):
	  # Create a Reading Span Strategy form
	  form = widgets.form(self.experiment, cols=[1,1,1,1,1,1,1,1,1], rows=[1,1,1,1,1,1,1,1,1,1], margins=(50,50,50,50), spacing=5, theme='plain')
	
	  labelQuestion = widgets.label(form, text="<span size='36'>MitU+00E4 keinoja kU+00E4ytit kirjainten muistamiseksi?U+005CnValitse yksi seuraavista ja paina OK.</span>", center=True)
	  labelEnteredText = widgets.label(form, text=exp.get("entered_text"), center=False)
	
	  button1 = widgets.button(form, text='1')
	  button2 = widgets.button(form, text='2')
	  button3 = widgets.button(form, text='3')
	  button4 = widgets.button(form, text='4')
	  button5 = widgets.button(form, text='5')
	  button6 = widgets.button(form, text='6')
	
	  option1 = widgets.label(form, text="<span size='24'>En kU+00E4yttU+00E4nyt mitU+00E4U+00E4n muistikeinoja</span>", center=False)
	  option2 = widgets.label(form, text="<span size='24'>Kertasin / toistelin kirjaimia mielessU+00E4ni</span>", center=False)
	  option3 = widgets.label(form, text="<span size='24'>Muodostin kirjaimista ryhmiU+00E4 / ryhmittelin kirjaimia mielessU+00E4ni</span>", center=False)
	  option4 = widgets.label(form, text="<span size='24'>Keksin kirjaimista sanoja / lauseita / tarinoita</span>", center=False)
	  option5 = widgets.label(form, text="<span size='24'>Muodostin kirjaimista kuvia / keksin kirjaimiin liittyviU+00E4 kuvia mielessU+00E4ni</span>", center=False)
	  option6 = widgets.label(form, text="<span size='24'>Jokin muu muistikeino</span>", center=False)
	  
	  buttonOK = widgets.button(form, text='OK')
	  buttonBS = widgets.button(form, text='C')
	
	  row = 0
	  form.set_widget(labelQuestion, (0, row), colspan=9)
	  
	  row += 1
	
	  row += 1
	  form.set_widget(labelEnteredText, (1, row), colspan=5)
	  form.set_widget(buttonBS, (6, row))
	  form.set_widget(buttonOK, (7, row))
	
	  row += 1
	  
	  row += 1
	  form.set_widget(button1, (0, row), colspan=2)
	  form.set_widget(option1, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button2, (0, row), colspan=2)
	  form.set_widget(option2, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button3, (0, row), colspan=2)
	  form.set_widget(option3, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button4, (0, row), colspan=2)
	  form.set_widget(option4, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button5, (0, row), colspan=2)
	  form.set_widget(option5, (2, row), colspan=7)
	  row += 1
	  form.set_widget(button6, (0, row), colspan=2)
	  form.set_widget(option6, (2, row), colspan=7)
	
	  button_clicked = form._exec()
	
	  
	# common for all forms:
	
	if (button_clicked == "OK"):
	  # quit this inline code object
	  # form.draw()
	  exp.set("ok_chosen", 1)
	  # pass
	elif (button_clicked == "C"):
	  exp.set("entered_text", str(exp.get("entered_text"))[0:-1])
	else:
	  exp.set("entered_text", str(exp.get("entered_text")) + str(button_clicked))
	__end__
	___prepare__
	from libopensesame import widgets
	__end__
	set description "Executes Python code"

define advanced_delay image_delay
	set duration "2000"
	set jitter "0"
	set description "Waits for a specified duration"
	set jitter_mode "Std. Dev."

define sketchpad S
	set duration "2000"
	set description "Displays stimuli"
	draw textline 0 0 "S" center=1 color=yellow font_family="serif" font_size=128 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script check_answer
	___run__
	# Here we can use self.get() without 'str()' function
	exp.set('answer', self.get('entered_text'))
	
	if ( exp.get("answer") == exp.get("answerWanted") ):
	  exp.set("answer_is_correct", 1)
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop sentence_loop_2_7
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "show_sentence_and_ask_TF"
	set break_if "[sentence_number] > [rlevel]"
	set column_order "sentence_number;letter"
	set cycles "7"
	set order "sequential"
	setcycle 0 letter ""
	setcycle 0 sentence_number "1"
	setcycle 1 letter ""
	setcycle 1 sentence_number "2"
	setcycle 2 letter ""
	setcycle 2 sentence_number "3"
	setcycle 3 letter ""
	setcycle 3 sentence_number "4"
	setcycle 4 letter ""
	setcycle 4 sentence_number "5"
	setcycle 5 letter ""
	setcycle 5 sentence_number "6"
	setcycle 6 letter ""
	setcycle 6 sentence_number "7"
	run show_sentence_and_ask_TF

define loop read_text
	set repeat "999"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "read_button"
	set break_if "[ok_chosen]==1"
	set column_order ""
	set cycles "1"
	set order "sequential"
	run read_button

define text_display cspan_training_welcome
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	TU+00E4ssU+00E4 tehtU+00E4vU+00E4ssU+00E4 sinun pitU+00E4U+00E4 laskea 
	ja muistaa ympyrU+00F6iden lukumU+00E4U+00E4riU+00E4.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin harjoitellaan!
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define inline_script init_pin2
	___run__
	exp.set("input_type", "pin_end")
	exp.set('pin', "")
	exp.set('pinWanted', "5678")
	exp.set('pin_is_correct', 0)
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script init_pin1
	___run__
	exp.set("input_type", "pin")
	exp.set('pin', "")
	exp.set('pinWanted', "7877")
	exp.set('pin_is_correct', 0)
	
	#exp.set("ok_chosen", 0)
	#exp.set("entered_text", "")
	__end__
	set _prepare ""
	set description "Executes Python code"

define advanced_delay delay_2000
	set duration "2000"
	set jitter "0"
	set description "Waits for a specified duration"
	set jitter_mode "Std. Dev."

define loop image_loop
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "image_and_delay"
	set break_if "[image_number] > [level]"
	set column_order "image_number"
	set cycles "8"
	set order "sequential"
	setcycle 0 image_number "1"
	setcycle 1 image_number "2"
	setcycle 2 image_number "3"
	setcycle 3 image_number "4"
	setcycle 4 image_number "5"
	setcycle 5 image_number "6"
	setcycle 6 image_number "7"
	setcycle 7 image_number "8"
	run image_and_delay

define text_display cspan_training1_ok
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	Oikein meni.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin harjoitellaan toisen kerran.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence pin_exit
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run init_pin2 "always"
	run keep_asking_for_pin "always"

define sequence image_and_delay
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run fixation_dot "always"
	run draw_image "always"
	run image_delay "always"

define sequence read_button
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run custom_form "always"
	run logger_after_response "always"

define touch_response TrueFalse_choice
	set _nrow "1"
	set _ncol "2"
	set description "A grid-based response item, convenient for touch screens"
	set timeout "infinite"

define text_display end_message
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	Koe loppui.
	
	Kiitos osallistumisesta.
	
	Nyt voit siirtyU+00E4 tU+00E4yttU+00E4mU+00E4U+00E4n kyselyU+00E4.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence WMcapacity
	run init_experiment "always"
	run pin1 "always"
	run logger_after_response "always"
	run pin_ok_lets_start "always"
	run train_cspan "always"
	run counting_span "always"
	run train_rspan "always"
	run reading_span "always"
	run end_message "always"
	run pin_exit "always"

define sequence cspan_training2
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run fixation_dot "always"
	run 7_circles "always"
	run delay_2000 "always"
	run i7 "always"
	run fixation_dot "always"
	run 2_circles "always"
	run delay_2000 "always"
	run i2 "always"
	run i72 "always"
	run ask_for_circle_numbers "always"
	run check_answer "always"
	run logger_after_response "always"
	run cspan_training_again "always"

define sequence cspan_training1
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run fixation_dot "always"
	run 3_circles "always"
	run delay_2000 "always"
	run cspan_training1_instruction1 "always"
	run fixation_dot "always"
	run 5_circles "always"
	run delay_2000 "always"
	run cspan_training1_instruction2 "always"
	run cspan_training1_instruction3 "always"
	run ask_for_circle_numbers "always"
	run check_answer "always"
	run logger_after_response "always"
	run cspan_training_again "always"

define sequence sentence_set_and_response
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run set_set "always"
	run sentence_loop_2_7 "always"
	run ask_for_letters "always"
	run check_rspan_answer "always"
	run logger_after_response "always"

define sketchpad Bussit_kulkevat
	set duration "0"
	set description "Displays stimuli"
	draw textline -224 80 "TOTTA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 224 80 "TARUA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -128 "Bussit kulkevat kiskoilla." center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw rect -448 0 448 160 fill=0 penwidth=3 color=white show_if="always"
	draw rect 0 0 448 160 fill=0 penwidth=3 color=white show_if="always"

define inline_script init_rspan0
	___run__
	exp.set('rwrong_answers', 0)
	exp.set("input_type", "rspan")
	__end__
	set _prepare ""
	set description "Executes Python code"

define sequence train_rspan
	run init_rspan_training "always"
	run rspan_training_welcome "always"
	run train_rspan1 "always"
	run train_rspan2 "always"
	run ask_for_letters "always"
	run check_rspan_training_answer "always"

define text_display rspan_lets_start
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	Kosketa nU+00E4yttU+00F6U+00E4, niin aloitetaan varsinainen tehtU+00E4vU+00E4.
	
	Jos teet tehtU+00E4vU+00E4ssU+00E4 virheen, se ei haittaa. 
	Jatka tehtU+00E4vU+00E4U+00E4 eteenpU+00E4in.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence counting_span
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run wrong_answers_to_0 "always"
	run cspan_levels "always"
	run cspan_its_over "always"
	run logger_after_response "always"

define loop rspan_levels
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "rspan_level"
	set break_if "[rwrong_answers] >= 3"
	set column_order "rlevel"
	set cycles "6"
	set order "sequential"
	setcycle 0 rlevel "2"
	setcycle 1 rlevel "3"
	setcycle 2 rlevel "4"
	setcycle 3 rlevel "5"
	setcycle 4 rlevel "6"
	setcycle 5 rlevel "7"
	run rspan_level

define inline_script 5_circles
	set _run "self.my_canvas.show()"
	___prepare__
	from openexp.canvas import canvas
	from math import sqrt
	
	circleradius = exp.get('tikapuu_circleradius')
	circlecolor = exp.get('tikapuu_circlecolor')
	
	balls = list()
	balls.append((150, 510, circlecolor))
	balls.append((710, 600, circlecolor))
	balls.append((500, 200, circlecolor))
	balls.append((700, 450, circlecolor))
	balls.append((650, 300, circlecolor))
	
	self.my_canvas = canvas(exp)
	
	for bx,by,bcolor in balls:
	  self.my_canvas.circle(bx, by, circleradius, fill=True, color=bcolor)
	__end__
	set description "Executes Python code"

define sequence ask_for_pin
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run read_text "always"
	run check_pin_input "always"
	run logger_after_response "always"
	run show_wrong_pin "[pin_is_correct]==0"

define inline_script init_image_set
	___run__
	
	exp.set("correct_responseStr", "c")
	# exp.set("numbers", "")
	# exp.set("answer_length", 0)
	
	# E.g. "s" + 584
	
	# v004
	ns = exp.get("set" + str(exp.get('repetition')))
	#print "ns:", ns
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script check_rspan_answer
	___run__
	if ( exp.get('entered_text') != exp.get('correct_letters') ):
	  exp.set('rwrong_answers', exp.get('rwrong_answers') + 1)
	__end__
	set _prepare ""
	set description "Executes Python code"

define text_display cspan_training2_ok
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	Hienoa!
	Vastasit oikein.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin aloitetaan varsinainen tehtU+00E4vU+00E4.
	
	Jos teet tehtU+00E4vU+00E4ssU+00E4 virheen, se ei haittaa. 
	Jatka tehtU+00E4vU+00E4U+00E4 eteenpU+00E4in.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence ask_for_circle_numbers
	set flush_keyboard "yes"
	set description "required: entered_text, ok_chosen"
	run read_text "always"

define loop repeat_3_times
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "image_set_and_response"
	set column_order "repetition;entered_text;ok_chosen"
	set cycles "3"
	set order "sequential"
	setcycle 0 entered_text ""
	setcycle 0 repetition "1"
	setcycle 0 ok_chosen ""
	setcycle 1 entered_text ""
	setcycle 1 repetition "2"
	setcycle 1 ok_chosen ""
	setcycle 2 entered_text ""
	setcycle 2 repetition "3"
	setcycle 2 ok_chosen ""
	run image_set_and_response

define loop rspan_repeat_3_times
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "sentence_set_and_response"
	set column_order "rrepetition;entered_text;ok_chosen"
	set cycles "3"
	set order "sequential"
	setcycle 0 entered_text ""
	setcycle 0 rrepetition "1"
	setcycle 0 ok_chosen ""
	setcycle 1 entered_text ""
	setcycle 1 rrepetition "2"
	setcycle 1 ok_chosen ""
	setcycle 2 entered_text ""
	setcycle 2 rrepetition "3"
	setcycle 2 ok_chosen ""
	run sentence_set_and_response

define inline_script check_rspan_training_answer
	___run__
	# exp.set('rspan_training_answer', self.get('letters_entered'))
	
	if (exp.get('entered_text') == "SL"):
	  exp.set('rspan_training_answer_is_correct', 1)
	__end__
	set _prepare ""
	set description "Executes Python code"

define text_display rspan_training_welcome
	set foreground "white"
	set font_size "32"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	TehtU+00E4vU+00E4ssU+00E4 2 sinun pitU+00E4U+00E4 kertoa, onko 
	lause totta vai tarua ja muistaa kirjaimia.
	
	Vastaa kysymyksiin mahdollisimman nopeasti. 
	Merkitse muistamasi kirjaimet esitysjU+00E4rjestyksessU+00E4.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin aloitetaan harjoitus!
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display wrong_answer
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	Hups! VU+00E4U+00E4rin meni!
	Jos tarvitset apua, nosta kU+00E4si ylU+00F6s.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin harjoitellaan uudestaan.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display cspan_training1_instruction1
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	NU+00E4it kolme ympyrU+00E4U+00E4.
	Sinun pitU+00E4U+00E4 siis muistaa: 3
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin jatketaan.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display cspan_training1_instruction2
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	NU+00E4it viisi ympyrU+00E4U+00E4.
	Sinun pitU+00E4U+00E4 siis muistaa: 5
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin jatketaan.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display cspan_training1_instruction3
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	Seuraavaksi sinulta kysytU+00E4U+00E4n U+00E4sken nU+00E4kemiesi ympyrU+00F6iden lukumU+00E4U+00E4rU+00E4t: 3 ja 5.
	
	Kirjoita ne tU+00E4ssU+00E4 muodossa: 35 ja paina OK.
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin pU+00E4U+00E4set kokeilemaan vastaamista.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define sequence reading_span
	run rspan_lets_start "always"
	run init_rspan0 "always"
	run set_items "always"
	run rspan_levels "always"
	run rspan_its_over "always"

define inline_script 7_circles
	set _run "self.my_canvas.show()"
	___prepare__
	from openexp.canvas import canvas
	from math import sqrt
	
	circleradius = exp.get('tikapuu_circleradius')
	circlecolor = exp.get('tikapuu_circlecolor')
	
	balls = list()
	balls.append((150, 510, circlecolor))
	balls.append((710, 600, circlecolor))
	balls.append((500, 200, circlecolor))
	balls.append((700, 450, circlecolor))
	balls.append((650, 300, circlecolor))
	balls.append((300, 150, circlecolor))
	balls.append((450, 350, circlecolor))
	
	self.my_canvas = canvas(exp)
	
	for bx,by,bcolor in balls:
	  self.my_canvas.circle(bx, by, circleradius, fill=True, color=bcolor)
	__end__
	set description "Executes Python code"

define feedback show_TFchoice
	set duration "50"
	set reset_variables "yes"
	set description "Displays stimuli"
	draw textline -224 80 "TOTTA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="[response]==1" html="yes"
	draw textline 224 80 "TARUA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="[response]==2" html="yes"
	draw textline 0 -128 "[sentenceText]" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw rect -448 0 448 160 fill=0 penwidth=3 color=white show_if="[response]==1"
	draw rect 0 0 448 160 fill=0 penwidth=3 color=white show_if="[response]==2"

define sequence show_sentence_and_ask_TF
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run init_sentence_item_and_letter "always"
	run sentence_and_TF_buttons "always"
	run TrueFalse_choice "always"
	run logger_after_response "always"
	run show_TFchoice "always"
	run letter "always"
	run logger_after_response "always"

define fixation_dot fixation_dot
	set foreground "white"
	set style "cross"
	set description "Presents a central fixation dot with a choice of various styles"
	set y "0"
	set background "black"
	set duration "500"
	set x "0"
	set penwidth "1"

define sequence cspan_level
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run init_level "always"
	run repeat_3_times "always"

define inline_script init_rspan_training
	___run__
	exp.set("rlevel", 2)
	#exp.set("ranswer_is_valid",  0)
	#exp.set("letters_entered",  "")
	exp.set("entered_text", "")
	exp.set("ok_chosen", 0)
	
	exp.set("input_type", "rspan")
	__end__
	___prepare__
	#exp.set("sentenceText", "")
	#exp.set("sentenceTrue", "")
	#exp.set("letter", "")
	__end__
	set description "Executes Python code"

define sketchpad Norsuilla_on_
	set duration "0"
	set description "Displays stimuli"
	draw textline -224 80 "TOTTA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 224 80 "TARUA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw rect -448 0 448 160 fill=0 penwidth=3 color=white show_if="always"
	draw rect 0 0 448 160 fill=0 penwidth=3 color=white show_if="always"
	draw textline 0 -128 "Norsuilla on kU+00E4rsU+00E4." center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script set_rwrong_answers_to_0
	set _run "exp.set('rwrong_answers', 0)"
	set _prepare ""
	set description "Executes Python code"

define inline_script init_sentence_item_and_letter
	set _run ""
	___prepare__
	sn = exp.get("sentence_number") - 1
	
	# since OpenSesame seems to be always one step ahead
	try:
	  exp.set("sentenceText", sentence_set[sn][0] )
	  exp.set("sentenceTrue", sentence_set[sn][1] )
	  exp.set("letter", set_letters[sn] )
	except IndexError:
	  exp.set("sentenceText", "")
	  exp.set("sentenceTrue", "")
	  exp.set("letter", "")
	else:
	  pass
	__end__
	set description "Executes Python code"

define text_display i2
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	NU+00E4it kaksi ympyrU+00E4U+00E4.
	Sinun pitU+00E4U+00E4 siis muistaa: 2
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin jatketaan.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define text_display i7
	set foreground "white"
	set font_size "48"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "left"
	__content__
	NU+00E4it seitsemU+00E4n ympyrU+00E4U+00E4.
	Sinun pitU+00E4U+00E4 siis muistaa: 7
	
	Kosketa nU+00E4yttU+00F6U+00E4, niin jatketaan.
	__end__
	set background "black"
	set duration "mouseclick"
	set font_family "serif"

define inline_script set_items
	set _run ""
	___prepare__
	# all sentences:
	sentences = [
	["Ravintolassa syU+00F6dU+00E4U+00E4n ruokaa.", 1],
	["Hiihto on kesU+00E4urheilulaji.", 0],
	["Ahvenet ovat kaloja.", 1],
	["KynttilU+00E4n voi sytyttU+00E4U+00E4 tulitikulla.", 1],
	["LehmU+00E4t asuvat navetassa.", 1],
	["Legot ovat rakennuspalikoita.", 1],
	["PyyhkeellU+00E4 keitetU+00E4U+00E4n perunoita.", 0],
	["Noppaa heitetU+00E4U+00E4n nenU+00E4llU+00E4.", 0],
	["SyksyllU+00E4 lehdet putoavat puista.", 1],
	["KU+00E4yrU+00E4torvi on soitin.", 1],
	["SanomalehdessU+00E4 on uutisia.", 1],
	["Parkkipaikka on ajoneuvoja varten.", 1],
	["Puuro on ajoneuvo.", 0],
	["Lanttulaatikko on jouluruoka.", 1],
	["Makaroni on juoma.", 0],
	["Oulu on maa Aasiassa.", 0],
	["Auringosta sataa vettU+00E4.", 0],
	["Kirjastosta vuokrataan hevosia.", 0],
	["Vasara on tyU+00F6kalu.", 1],
	["Pallo on neliskulmainen.", 0],
	["Lumi sataa taivaalta.", 1],
	["Karkki on vihannes.", 0],
	["Kissanpentu on emoaan nuorempi.", 1],
	["Vadelmat kasvavat pensaassa.", 1],
	["Jalkapallossa kU+00E4ytetU+00E4U+00E4n mailaa.", 0],
	["JU+00E4rvessU+00E4 on suolaista vettU+00E4.", 1],
	["Koulussa opitaan asioita.", 1],
	["JU+00E4lkiruoka syU+00F6dU+00E4U+00E4n ennen aamiaista.", 0],
	["LU+00E4ksy on hiuksiin laitettava koriste.", 0],
	["Tarrassa on tarttuva pinta.", 1],
	["Ampiaisella voi ratsastaa.", 0],
	["Omenat kasvavat maan alla.", 0],
	["SU+00E4hlymailalla ajetaan autoa.", 0],
	["Silitysrauta on aina kylmU+00E4.", 0],
	["Hyttyset pitU+00E4vU+00E4t pientU+00E4 U+00E4U+00E4ntU+00E4.", 1],
	["Ruokakaupasta voi ostaa maitoa.", 1],
	["PU+00E4U+00E4siU+00E4ismuna on tehty suklaasta.", 1],
	["Hanhet ovat lintuja.", 1],
	["JU+00E4U+00E4telU+00F6U+00E4 sU+00E4ilytetU+00E4U+00E4n lU+00E4mpimU+00E4ssU+00E4.", 0],
	["Paperille voi kirjoittaa.", 1],
	["Porkkanat kasvavat kasvimaalla.", 1],
	["LehmiU+00E4 voidaan lypsU+00E4U+00E4.", 1],
	["Uimalasit suojaavat korvia.", 0],
	["Villasukat puetaan jalkaan.", 1],
	["Nuohoojat puhdistavat savupiippuja.", 1],
	["Radiosta katsellaan elokuvia.", 0],
	["Aurinko sijaitsee avaruudessa.", 1],
	["Kitarassa on koskettimet.", 0],
	["Saunasta lainataan kirjoja.", 0],
	["Tunti on pidempi kuin minuutti.", 1],
	["Koirat osaavat hirnua.", 0],
	["Kukat tarvitsevat vettU+00E4.", 1],
	["Mansikat ovat kypsU+00E4nU+00E4 punaisia.", 1],
	["KU+00E4U+00E4rmeellU+00E4 on pitkU+00E4t korvat.", 0],
	["Koulukirjaa luetaan ylU+00F6salaisin.", 0],
	["Paloasemalla on paloautoja.", 1],
	["Ihmisen luut ovat sinisiU+00E4.", 0],
	["LU+00F6ylyU+00E4 heitetU+00E4U+00E4n kiukaalle.", 1],
	["Imurilla pestU+00E4U+00E4n pyykkiU+00E4.", 0],
	["Lautaselta syU+00F6dU+00E4U+00E4n patalappuja.", 1],
	["Uuni pitU+00E4U+00E4 maidon kylmU+00E4nU+00E4.", 0],
	["Varikset ovat lintuja.", 1],
	["Purjevene kulkee sU+00E4hkU+00F6llU+00E4.", 0],
	["SU+00E4mpylU+00E4 on erU+00E4U+00E4nlainen leipU+00E4.", 1],
	["ItkevU+00E4 ihminen on surullinen.", 1],
	["Perhoset ovat hyU+00F6nteisiU+00E4.", 1],
	["Pipoa pidetU+00E4U+00E4n jalassa.", 0],
	["Kurkku on pallon muotoinen.", 0],
	["KynU+00E4llU+00E4 voi piirtU+00E4U+00E4.", 1],
	["Ruusuissa on piikkejU+00E4.", 1],
	["PolkupyU+00F6rU+00E4ssU+00E4 on kuusi rengasta.", 0],
	["Ilmapallo on aina ruskea.", 0],
	["Leipurin tyU+00F6tU+00E4 on kenkien korjaus.", 0],
	["Kellosta katsotaan aika.", 1],
	["Lumi maistuu makealle.", 0],
	["Kanilla on pitkU+00E4 hU+00E4ntU+00E4.", 0],
	["KylvyssU+00E4 pidetU+00E4U+00E4n kumisaappaita.", 0],
	["LU+00E4U+00E4kU+00E4rin tyU+00F6tU+00E4 on mansikoiden myynti.", 0],
	["Lumilinnoja rakennetaan kesU+00E4llU+00E4.", 0],
	["Housut puetaan pU+00E4U+00E4hU+00E4n.", 0],
	["Omenat kasvavat puussa.", 1]
	]
	
	pick_letters = "PMVSRKHVMRHJSHLHKSRLVJSHPVMKVJSLKHPRLVMHLSLJSVHMJSMRLVPRVLSMVPKMJLRMKHRLPSMVPHJMK"
	# for sent in sentences
	# ...
	
	sentence_indexes = range(81);
	sentence_indexes.reverse();
	sentence_numbers = [[[sentence_indexes.pop() for k in range(0+i)] for j in range(3)] for i in range(2, 8)]
	
	# fill 0 and 1 with None
	sentence_numbers.insert(0, None)
	sentence_numbers.insert(1, None)
	
	
	
	
	
	# Now you can reference to the sentence numbers with level
	__end__
	set description "Executes Python code"

define sketchpad letter
	set duration "2000"
	set description "Displays stimuli"
	draw textline 0 0 "[letter]" center=1 color=yellow font_family="serif" font_size=128 font_italic=no font_bold=no show_if="always" html="yes"

define sequence ask_for_letters
	set flush_keyboard "yes"
	set description "required: entered_text, ok_chosen"
	run read_text "always"

define inline_script check_cspan_answer
	___run__
	# We can't use response variable because it is smart typed
	# print "response:" + str(self.get('response'))
	
	# add c prefix
	
	
	# We can not use correct variable because we can't change response variable value
	# print "correct:" + str(self.get('correct'))
	
	# exp.set('responseString', "c" + str(self.get('numbers')))
	
	exp.set('responseString', "c" + str(self.get('entered_text')))
	
	if ( self.get('responseString') != self.get('correct_responseStr') ):
	  exp.set('wrong_answers', exp.get('wrong_answers') + 1)
	
	# print "After:" + str(self.get('wrong_answers'))
	# print "#####"
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script init_experiment
	set _run ""
	___prepare__
	# asetuksia
	
	#exp.set('min_circles', 2)
	#exp.set('max_circles', 8)
	exp.set('tikapuu_circlecolor', 'yellow')
	# exp.set('tikapuu_lettercolor', 'yellow')
	exp.set('tikapuu_circleradius', 50)
	
	# ei kU+00E4ytU+00F6ssU+00E4:
	# exp.set('image_duration', 50)
	# exp.set('image_duration', 1500)
	# (asetetaan image_duration -yksikU+00F6ssU+00E4)
	
	# ei kU+00E4ytU+00F6ssU+00E4:
	# exp.set('min_images', 2)
	# exp.set('max_images', 8)
	# (tasot asetetaan tasoja -loopissa)
	
	# exp.set('count', 0)
	# exp.set('correct', 0)
	
	# pohjustetaan alempien tasojen kU+00E4yttU+00F6U+00F6n:
	#exp.set('wrong_answers', 0)
	#exp.set('training_answer', 99)
	#exp.set('pin', "")
	#exp.set('correct_pin', 0)
	#exp.set('sentence_number', -1)
	
	#
	#exp.set('cspan_training_answer', 99)
	#exp.set('cspan_training_answer_correct', 0)
	
	#
	#exp.set('rspan_training_answer', 99)
	#exp.set('rspan_training_answer_correct', 0)
	__end__
	set description "Executes Python code"

define sequence pin1
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run init_pin1 "always"
	run keep_asking_for_pin "always"

define sketchpad sentence_and_TF_buttons
	set duration "0"
	set description "Displays stimuli"
	draw textline -224 80 "TOTTA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 224 80 "TARUA" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 -128 "[sentenceText]" center=1 color=white font_family="serif" font_size=64 font_italic=no font_bold=no show_if="always" html="yes"
	draw rect -448 0 448 160 fill=0 penwidth=3 color=white show_if="always"
	draw rect 0 0 448 160 fill=0 penwidth=3 color=white show_if="always"

